#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Sep 18 12:37:21 2021

@author: nadia
"""

 Generación y análisis de retornos de portafolios artificiales y reales GARPAR

import pandas as pd
import numpy as np


_ENT = 1 / np.log2(2)

def risso_candidate_entropy(windows_size=4):
    probability_loss = np.linspace(0.0, 1.0, num=windows_size + 1)
    
    # Se corrigen probabilidades porque el cálculo de la entropía trabaja con 
    # logaritmo y el logaritmo de cero no puede calcularse
    epsilon = np.finfo(probability_loss.dtype).eps
    probability_loss[0]= epsilon
    probability_loss[-1]=  1 - epsilon   

    #Calcula entropy
    first_part = probability_loss * np.log2(probability_loss)
    second_part = (1 - probability_loss)* np.log2 (1 - probability_loss)

    modificated_entropy = _ENT * (first_part + second_part)
    return modificated_entropy

def makestock

# asume el valor uno cuando el proceso es aleatorio, 
# no se forman tendencias alcistas o bajistas y 
# existe eficiencia informacional
# persigue un valor mínimo cercano a cero cuando el alza o la baja
# son un evento cierto

#def Select_level_entropy(h):
#   if h not in modificated_entropy:
#        raise ValueError(f"h no esta entre los valores permitidos. 
# Seleccione uno: {modificated_entropy}")
 #       else  print f"Level entropy is {h}"
# Cohersionar el valor a elegir cada uno de los candidatos  y no trabajar 
# con excepciones 

def nearest(array, value, side=None):
    # based on: http://stackoverflow.com/a/2566508
    #           http://stackoverflow.com/a/3230123
    #           http://stackoverflow.com/a/17119267
    if side not in (None, "gt", "lt"):
        msg = "'side' must be None, 'gt' or 'lt'. Found {}".format(side)
        raise ValueError(msg)

    raveled = np.ravel(array)
    cleaned = raveled[~np.isnan(raveled)]

    if side is None:
        idx = np.argmin(np.abs(cleaned - value))

    else:
        masker, decisor = (
            (np.ma.less_equal, np.argmin)
            if side == "gt" else
            (np.ma.greater_equal, np.argmax))

        diff = cleaned - value
        mask = masker(diff, 0)
        if np.all(mask):
            return None

        masked_diff = np.ma.masked_array(diff, mask)
        idx = decisor(masked_diff)

    return cleaned[idx]

# def Simulate_secuency(windows_size, window_number, entropy_model, level_entropy )


# np.isclose([1,2,3], 2).any()

# https://pyportfolioopt.readthedocs.io/en/latest/BlackLitterman.html#module-pypfopt.black_litterman --> Revista Q4
# https://pypi.org/project/Riskfolio-Lib/
# https://plotly.com/python/v3/ipython-notebooks/markowitz-portfolio-optimization/
# sumar modelos de entropía 
